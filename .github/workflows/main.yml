name: Build and Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    name: CI
    environment: dev
    runs-on: ubuntu-latest

    steps:
      - name: Obtener c√≥digo fuente
        uses: actions/checkout@v4
      - name: Obtener SHA corto
        id: short
        run: echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      - name: Validar que el repositorio ECR existe
        run: |
          echo "Verificando si el repositorio '$ECR_REPOSITORY' existe en ECR..."
          if aws ecr describe-repositories --repository-names "$ECR_REPOSITORY" > /dev/null 2>&1; then
            echo "‚úÖ El repositorio ya existe: $ECR_REPOSITORY"
          else
            echo "üöÄ El repositorio no existe. Cre√°ndolo..."
            aws ecr create-repository --repository-name "$ECR_REPOSITORY"
            echo "‚úÖ Repositorio creado: $ECR_REPOSITORY"
          fi
        env:
          ECR_REPOSITORY: ${{ github.event.repository.name }}
      - name: Iniciar sesi√≥n en Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Construir, etiquetar y subir imagen a ECR
        env:
          ECR_REGISTRY: ${{ vars.AWS_ACCOUNT_ID }}.dkr.ecr.${{ vars.AWS_REGION }}.amazonaws.com
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ steps.short.outputs.short_sha }}
        run: |
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy:
    name: CD
    environment: dev
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Obtener c√≥digo fuente
        uses: actions/checkout@v4
      - name: Obtener SHA corto
        id: short
        run: echo "short_sha=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_OUTPUT
      - name: Configurar credenciales de AWS
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Obtener Instance ID del Bastion
        id: bastion
        run: |
          INSTANCE_ID=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=ec2-${{ vars.INFRA_NAME }}-bastion-${{ vars.ENV }}" "Name=instance-state-name,Values=running" \
            --query "Reservations[*].Instances[*].InstanceId" \
            --output text | awk '{print $1}')
          echo "instance_id=$INSTANCE_ID" >> "$GITHUB_OUTPUT"
      
      - name: Reemplazar variables en deployment.yaml
        run: |
          sed -i "s|\$MS_NAME|${{ github.event.repository.name }}|g" k8s/deployment.yaml
          sed -i "s|\$AWS_ACCOUNT_ID|${{ vars.AWS_ACCOUNT_ID }}|g" k8s/deployment.yaml
          sed -i "s|\$AWS_REGION|${{ vars.AWS_REGION }}|g" k8s/deployment.yaml
          sed -i "s|\$TAG|${{ steps.short.outputs.short_sha }}|g" k8s/deployment.yaml

      - name: Desplegar en EKS v√≠a Bastion usando SSM
        id: ssm_deploy
        run: |
          ENCODED=$(base64 -w0 k8s/deployment.yaml)
          COMMAND_ID=$(aws ssm send-command \
            --targets "Key=instanceIds,Values=${{ steps.bastion.outputs.instance_id }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
                "echo '"$ENCODED"' | base64 -d > /tmp/deployment.yaml",
                "export KUBECONFIG=/home/ec2-user/.kube/config",
                "kubectl apply -f /tmp/deployment.yaml",
                "kubectl rollout status deployment/${{ github.event.repository.name }}"]' \
            --region ${{ vars.AWS_REGION }} \
            --query "Command.CommandId" \
            --output text)
          echo "command_id=$COMMAND_ID" >> $GITHUB_OUTPUT

      - name: Esperar y obtener resultado del despliegue
        run: |
          for i in {1..30}; do
            STATUS=$(aws ssm get-command-invocation \
              --instance-id ${{ steps.bastion.outputs.instance_id }} \
              --command-id ${{ steps.ssm_deploy.outputs.command_id }} \
              --region ${{ vars.AWS_REGION }} \
              --query "Status" \
              --output text)
            echo "Estado actual: $STATUS"

            if [[ "$STATUS" == "Success" ]]; then
              aws ssm get-command-invocation \
                --instance-id ${{ steps.bastion.outputs.instance_id }} \
                --command-id ${{ steps.ssm_deploy.outputs.command_id }} \
                --region ${{ vars.AWS_REGION }} \
                --query "{Stdout:StandardOutputContent, Stderr:StandardErrorContent}" \
                --output text
              exit 0
            elif [[ "$STATUS" == "Failed" || "$STATUS" == "Cancelled" ]]; then
              echo "El comando fall√≥ o fue cancelado."
              aws ssm get-command-invocation \
                --instance-id ${{ steps.bastion.outputs.instance_id }} \
                --command-id ${{ steps.ssm_deploy.outputs.command_id }} \
                --region ${{ vars.AWS_REGION }} \
                --query "{Stdout:StandardOutputContent, Stderr:StandardErrorContent}" \
                --output text
              exit 1
            fi

            sleep 10
          done

          echo "Timeout esperando el resultado del comando SSM."
          exit 1
